{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/seach-box.component.tsx","utils/data.utils.ts","App.tsx","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placheoder","handleChange","type","placeholder","onChange","getData","url","a","fetch","response","json","App","useState","searchField","setSearchFiled","setMonsters","filteredMonsters","setFilteredMonsters","useEffect","users","fetchUsers","newFilteredMonsters","filter","includes","event","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUAQaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCLTC,EAAW,SAACR,GAA0B,IACzCS,EAAaT,EAAbS,SACR,OACE,qBAAKR,UAAU,YAAf,SACGQ,EAASC,KAAI,SAACN,GAAD,OACZ,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCNdM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,aAAf,OACvB,uBACEZ,UAAU,SACVa,KAAK,SACLC,YAAaH,EACbI,SAAUH,MCdDI,EAAO,uCAAG,WAAUC,GAAV,eAAAC,EAAA,sEACGC,MAAMF,GADT,cACbG,EADa,gBAENA,EAASC,OAFH,mFAAH,sDCiDLC,G,MApCH,WAAO,IAAD,EACsBC,mBAAS,IAD/B,mBACTC,EADS,KACIC,EADJ,OAEgBF,mBAAoB,IAFpC,mBAETf,EAFS,KAECkB,EAFD,OAGgCH,mBAASf,GAHzC,mBAGTmB,EAHS,KAGSC,EAHT,KAKhBC,qBAAU,YACQ,uCAAG,4BAAAX,EAAA,sEACGF,EAClB,8CAFe,OACXc,EADW,OAIjBJ,EAAYI,GAJK,2CAAH,qDAMhBC,KACC,IAEHF,qBAAU,WACR,IAAMG,EAAsBxB,EAASyB,QAAO,SAAC9B,GAAD,OAAqBA,EAAQE,KAAK6B,SAASV,MACvFI,EAAoBI,KACpB,CAACxB,EAASgB,IAMZ,OACE,sBAAKxB,UAAU,MAAf,UACE,6DACA,cAAC,EAAD,CACEW,WAAW,iBACXC,aATiB,SAACuB,GACtBV,EAAeU,EAAMC,OAAOC,UAU1B,cAAC,EAAD,CAAU7B,SAAUmB,SChCXW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8cdbd91d.chunk.js","sourcesContent":["import { Monster } from \"../../App\";\r\n\r\nimport \"./card.styles.css\";\r\n\r\ntype CardProps = {\r\n  monster: Monster;\r\n};\r\n\r\nexport const Card = (props : CardProps) => (\r\n  <div className=\"card-container\">\r\n    <img\r\n      alt=\"monster\"\r\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n    />\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n  </div>\r\n);\r\n","import { Monster } from \"../../App\";\r\n\r\nimport \"./card-list.style.css\";\r\n\r\nimport { Card } from \"../card/card.component\";\r\n\r\ntype CardListProps = {\r\n  monsters: Monster[];\r\n};\r\n\r\nexport const CardList = (props: CardListProps) => {\r\n  const { monsters } = props;\r\n  return (\r\n    <div className=\"card-list\">\r\n      {monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { ChangeEventHandler } from \"react\";\r\n\r\nimport \"./search-box.styles.css\";\r\n\r\ninterface ISearchBoxProps {\r\n  placheoder?: string;\r\n  handleChange: ChangeEventHandler<HTMLInputElement>;\r\n}\r\n\r\nexport const SearchBox = ({ placheoder, handleChange }: ISearchBoxProps) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placheoder}\r\n    onChange={handleChange}\r\n  />\r\n);\r\n","export const getData = async <T>(url:string): Promise<T> => {\r\n    const response =await fetch(url);\r\n    return await response.json()\r\n};\r\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { CardList } from \"./components/card-list/card-list.component\";\r\nimport { SearchBox } from \"./components/search-box/seach-box.component\";\r\n\r\nimport { getData } from \"./utils/data.utils\";\r\nimport \"./App.css\";\r\n\r\nexport type Monster = {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n};\r\n\r\nconst App = () => {\r\n  const [searchField, setSearchFiled] = useState(\"\");\r\n  const [monsters, setMonsters] = useState<Monster[]>([]);\r\n  const [filteredMonsters, setFilteredMonsters] = useState(monsters);\r\n\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      const users = await getData<Monster[]>(\r\n        \"https://jsonplaceholder.typicode.com/users\"\r\n      );\r\n      setMonsters(users);\r\n    };\r\n    fetchUsers()\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n    const newFilteredMonsters = monsters.filter((monster: Monster)=>(monster.name.includes(searchField)))\r\n    setFilteredMonsters(newFilteredMonsters)\r\n  },[monsters,searchField])\r\n\r\n  const onSearchChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n    setSearchFiled(event.target.value)\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Monsters Rolodex TypeScript</h1>\r\n      <SearchBox\r\n        placheoder=\"seach monsters\"\r\n        handleChange={onSearchChange}\r\n      />\r\n      <CardList monsters={filteredMonsters} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}